# -*- coding: utf-8 -*-
"""Build regression PyCaret .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oP-tMrZJzgUiWVww1hxRX0mCwMRs3vQ6

# load data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

data_path = input("insert your data here ")
def data_type ():
    dlist = data_path.split(".")
    if dlist[-1]=="csv":
        print("data is type of csv file")
    elif dlist[-1]=="xlsx":
        print("data is type of Excell file")
    elif dlist[-1]=="sql":
        print("data is type of sql file")
    else :print("your data tybe is not correct")

data_type()
#E:\electro pi\dataset\data.csv

def load_data(data_path):
    """Loads the data from the specified path."""
    df = pd.read_csv(data_path)
    return df
df = load_data(data_path)

"""# data preprocessing"""

df.shape

df.head()

df.isna().sum()

"""missing data"""

from sklearn.impute import SimpleImputer
mean_imputer = SimpleImputer(strategy="mean",missing_values=np.nan)
mode_imputer = SimpleImputer(strategy="most_frequent",missing_values=np.nan)

col = df.columns

for i in col:
    if df[i].dtype == "object":
        df[i]=mode_imputer.fit_transform(df[i].values.reshape(-1,1))
    else :
        df[i]=mean_imputer.fit_transform(df[i].values.reshape(-1,1))

df.isna().sum()

df.head()

"""# EDA"""

def visualize_data(df):
    """Generates a comprehensive visualization dashboard for each column type."""

    for column in df.columns:
        if df[column].dtype == 'object':
            # Plot a bar chart of the number of unique values in the column
            fig = plt.figure(figsize=(10, 6))
            plt.bar(df[column].unique(), df[column].value_counts())
            plt.title(f'Number of unique values in {column}')
            plt.show()

        else:
            # Plot a histogram of the distribution of the column
            fig = plt.figure(figsize=(10, 6))
            sns.histplot(df[column])
            plt.title(f'Distribution of {column}')
            plt.show()
visualize_data(df)

! pip install pandas_profiling

import pandas_profiling
profile = df.profile_report(title='Pandas Profiling Report')
profile



"""# pycaret"""

!pip install pycaret

x = df.drop(df.columns[-1], axis=1)
x.head()

y = df[df.columns[-1]]
y.head()

"""from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=123)"""

from pycaret.regression import *
clas_or_regr = input ("enter your methode : c or r ")

if clas_or_regr == 'r':
  print("regression setup")
  s = setup(df, target = y, session_id = 123)
  print("*************************")
  print("compare models")
  print("*************************")
  best = compare_models()
  print(best)
  print("*************************")
  print("analyze model")
  print("*************************")
  evaluate_model(best)
  plot_model(best, plot = 'residuals')
  plot_model(best, plot = 'feature')
  print("*************************")
  print("predict model")
  print("*************************")
  predict_model(best)
  print("*************************")
  print("save model")
  print("*************************")
  save_model(best, 'my_best_pipeline')
elif clas_or_regr =='c':
  print("classification setup")
  s = setup(df, target = y, session_id = 123)
  print("*************************")
  print("compare models")
  print("*************************")
  best = compare_models()
  print(best)
  print("*************************")
  print("analyze model")
  print("*************************")
  evaluate_model(best)
  plot_model(best, plot = 'auc')
  plot_model(best, plot = 'confusion_matrix')
  print("*************************")
  print("predict model")
  print("*************************")
  predict_model(best)
  print("*************************")
  print("save model")
  print("*************************")
  save_model(best, 'my_best_pipeline')

else :
  print("please enter vallid input")

from pycaret.classification import *
clas_or_regr = input ("enter your methode : c or r ")

if clas_or_regr == 'r':
  print("setup")
  s = setup(data, target = 'Class variable', session_id = 123)
  print("*************************")
  print("compare models")
  print("*************************")
  best = compare_models()
  print(best)
  print("*************************")
  print("analyze model")
  print("*************************")
  evaluate_model(best)
  plot_model(best, plot = 'auc')
  plot_model(best, plot = 'confusion_matrix')
  print("*************************")
  print("predict model")
  print("*************************")
  predict_model(best)
  print("*************************")
  print("save model")
  print("*************************")
  save_model(best, 'my_best_pipeline')